var u=Object.defineProperty;var c=(r,e,t)=>e in r?u(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var o=(r,e,t)=>(c(r,typeof e!="symbol"?e+"":e,t),t);class f{constructor(e){o(this,"data");this.data=JSON.parse(e)}getHeader(){return this.data.header}getDataSets(){return this.data.dataSets}getStructure(){return this.data.structure}getObservationsBySeries(e){const t=this.data.dataSets[0].series[e];return t?Object.values(t.observations):void 0}getObservationsByRefArea(e){const t=this.getSeriesIdByRefArea(e);return t?this.data.dataSets[0].series[t].observations:void 0}getSeriesIdByRefArea(e){const t=this.data.structure.dimensions.series.find(s=>s.id==="REF_AREA");if(!t)return;const i=t.values.find(s=>s.id===e);return i?`0:0:0:0:0:0:${t.values.indexOf(i)}:0`:void 0}getRefAreas(){const e=this.data.structure.dimensions.series.find(t=>t.id==="REF_AREA");return e?e.values:[]}getTimePeriods(){const e=this.data.structure.dimensions.observation.find(t=>t.id==="TIME_PERIOD");return e?e.values:[]}getObservationsByYear(e){const t=this.getTimePeriods(),i=t==null?void 0:t.findIndex(a=>a.id===e);if(i===void 0||i===-1)return;const s={};return Object.entries(this.getDataSets()[0].series).forEach(([a,d])=>{const n=d.observations[i.toString()];n!==void 0&&(s[a]=n)}),Object.keys(s).length>0?s:void 0}}export{f as S};
